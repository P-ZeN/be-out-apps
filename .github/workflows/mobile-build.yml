name: Mobile App Build and Release

on:
  push:
    branches: [ mobile-build ]  # Only run on mobile-build branch
    paths:  # Only run when these files change
      - 'client/**'
      - '.github/workflows/mobile-build.yml'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [ mobile-build ]  # Only run PR checks when targeting mobile-build branch
    paths:  # Only run when these files change
      - 'client/**'
      - '.github/workflows/mobile-build.yml'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:  # Allow manual triggering from GitHub UI

env:
  CARGO_TERM_COLOR: always

jobs:
  test-client:
    name: Test Client App
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    - name: Install dependencies
      run: npm ci
    - name: Build client
      run: npm run build:client
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_MAPBOX_ACCESS_TOKEN: ${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}
    - name: Test client
      run: npm run test --workspace=client --if-present

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: test-client
    if: true  # Enabled
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android

    - name: Install Rust targets for Android
      run: |
        echo "Installing Android targets..."
        rustup target add aarch64-linux-android
        rustup target add armv7-linux-androideabi
        rustup target add x86_64-linux-android
        rustup target add i686-linux-android
        echo "Installed targets:"
        rustup target list --installed | grep android

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        build-tools: 33.0.0
        ndk-version: 25.2.9519653

    - name: Verify Android Environment
      run: |
        echo "Android SDK Root: $ANDROID_SDK_ROOT"
        echo "NDK Home: $ANDROID_SDK_ROOT/ndk/25.2.9519653"
        echo "Java Home: $JAVA_HOME"
        ls -la $ANDROID_SDK_ROOT/ndk/ || echo "NDK directory not found"
        # Find actual NDK directory
        if [ -d "$ANDROID_SDK_ROOT/ndk" ]; then
          echo "Available NDK versions:"
          ls -la $ANDROID_SDK_ROOT/ndk/
          NDK_DIR=$(ls -1 $ANDROID_SDK_ROOT/ndk/ | head -1)
          echo "Using NDK: $NDK_DIR"
          echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/$NDK_DIR" >> $GITHUB_ENV
        fi

    - name: Configure Cargo for Android
      run: |
        echo "Setting up Cargo configuration for Android builds..."
        echo "Using NDK_HOME: $NDK_HOME"
        mkdir -p ~/.cargo

        # Verify NDK tools exist before creating config
        NDK_TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
        echo "Checking NDK toolchain at: $NDK_TOOLCHAIN"

        if [ ! -d "$NDK_TOOLCHAIN" ]; then
          echo "❌ NDK toolchain directory not found: $NDK_TOOLCHAIN"
          echo "Available NDK contents:"
          find "$NDK_HOME" -type d -name "bin" 2>/dev/null | head -5
          exit 1
        fi

        # Find the correct Android API level linkers
        echo "Looking for Android clang linkers..."
        AARCH64_LINKER=$(find "$NDK_TOOLCHAIN" -name "*aarch64*android*clang" | head -1)
        ARMV7_LINKER=$(find "$NDK_TOOLCHAIN" -name "*armv7*android*clang" -o -name "*arm*android*clang" | head -1)
        X86_64_LINKER=$(find "$NDK_TOOLCHAIN" -name "*x86_64*android*clang" | head -1)
        I686_LINKER=$(find "$NDK_TOOLCHAIN" -name "*i686*android*clang" | head -1)

        echo "Found linkers:"
        echo "AARCH64: $AARCH64_LINKER"
        echo "ARMV7: $ARMV7_LINKER"
        echo "X86_64: $X86_64_LINKER"
        echo "I686: $I686_LINKER"

        # Use found linkers or fallback to API level 21
        AARCH64_LINKER=${AARCH64_LINKER:-"$NDK_TOOLCHAIN/aarch64-linux-android21-clang"}
        ARMV7_LINKER=${ARMV7_LINKER:-"$NDK_TOOLCHAIN/armv7a-linux-androideabi21-clang"}
        X86_64_LINKER=${X86_64_LINKER:-"$NDK_TOOLCHAIN/x86_64-linux-android21-clang"}
        I686_LINKER=${I686_LINKER:-"$NDK_TOOLCHAIN/i686-linux-android21-clang"}

        # Create Cargo config with discovered linkers
        cat > ~/.cargo/config.toml << 'CARGO_EOF'
        [target.aarch64-linux-android]
        ar = "AR_PLACEHOLDER"
        linker = "AARCH64_LINKER_PLACEHOLDER"

        [target.armv7-linux-androideabi]
        ar = "AR_PLACEHOLDER"
        linker = "ARMV7_LINKER_PLACEHOLDER"

        [target.x86_64-linux-android]
        ar = "AR_PLACEHOLDER"
        linker = "X86_64_LINKER_PLACEHOLDER"

        [target.i686-linux-android]
        ar = "AR_PLACEHOLDER"
        linker = "I686_LINKER_PLACEHOLDER"
        CARGO_EOF

        # Replace placeholders with actual paths
        sed -i "s|AR_PLACEHOLDER|$NDK_TOOLCHAIN/llvm-ar|g" ~/.cargo/config.toml
        sed -i "s|AARCH64_LINKER_PLACEHOLDER|$AARCH64_LINKER|g" ~/.cargo/config.toml
        sed -i "s|ARMV7_LINKER_PLACEHOLDER|$ARMV7_LINKER|g" ~/.cargo/config.toml
        sed -i "s|X86_64_LINKER_PLACEHOLDER|$X86_64_LINKER|g" ~/.cargo/config.toml
        sed -i "s|I686_LINKER_PLACEHOLDER|$I686_LINKER|g" ~/.cargo/config.toml

        echo "Cargo config created:"
        cat ~/.cargo/config.toml

        # Verify all tools exist
        echo "Verifying all tools exist:"
        for tool in "$NDK_TOOLCHAIN/llvm-ar" "$AARCH64_LINKER" "$ARMV7_LINKER" "$X86_64_LINKER" "$I686_LINKER"; do
          if [ -f "$tool" ]; then
            echo "✅ $tool"
          else
            echo "❌ $tool (not found)"
          fi
        done
      env:
        NDK_HOME: ${{ env.NDK_HOME }}

    - name: Verify NDK Tools
      run: |
        echo "Verifying NDK tools are available..."
        echo "NDK_HOME: $NDK_HOME"
        ls -la "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/" | head -10

        # Test if the linkers exist
        if [ -f "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" ]; then
          echo "✅ ARM64 linker found"
        else
          echo "❌ ARM64 linker not found"
          echo "Available linkers:"
          find "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/" -name "*android*clang*" | head -5
        fi
      env:
        NDK_HOME: ${{ env.NDK_HOME }}

    - name: Install Tauri CLI
      run: |
        echo "Installing Tauri CLI globally..."
        npm install -g @tauri-apps/cli@latest

        echo "Verifying Tauri CLI installation..."
        which tauri || echo "Tauri CLI not found in PATH"
        tauri --version || echo "Failed to get Tauri version"

        echo "Checking if tauri is available via npx..."
        npx tauri --version || echo "npx tauri failed"

        echo "Installing Tauri CLI locally as well..."
        npm install @tauri-apps/cli@latest

        echo "Verifying local installation..."
        npx tauri --version || echo "Local npx tauri failed"

        echo "Checking package.json scripts..."
        cat package.json | grep -A 5 -B 5 "scripts" || echo "No scripts section found"

    - name: Install dependencies
      run: npm ci

    - name: Setup Android Code Signing
      working-directory: ./client
      run: |
        echo "Setting up Android code signing for CI..."

        # Create keystore directory
        mkdir -p android/

        # Decode and save the keystore file with CI environment variables approach
        if [ -n "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ]; then
          echo "✅ Android keystore found in secrets"
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/release.keystore

          echo "✅ Android code signing configured with environment variables"
          ls -la android/release.keystore
        else
          echo "⚠️  No Android keystore found in secrets - building unsigned APK"
          echo "To enable signed builds, add these secrets to your GitHub repository:"
          echo "- ANDROID_KEYSTORE_BASE64: Base64 encoded keystore file"
          echo "- ANDROID_KEYSTORE_PASSWORD: Keystore password"
          echo "- ANDROID_KEY_ALIAS: Key alias"
          echo "- ANDROID_KEY_PASSWORD: Key password"
        fi

    - name: Debug Signing Setup
      working-directory: ./client
      run: |
        echo "=== Checking CI signing setup ==="
        if [ -f "android/release.keystore" ]; then
          echo "✅ Keystore file exists at android/release.keystore"
          ls -la android/release.keystore
        else
          echo "❌ Keystore file not found"
          ls -la android/ || echo "Android directory not found"
        fi

        echo "=== Environment variables for signing ==="
        echo "CI: $CI"
        echo "KEYSTORE_PATH: $KEYSTORE_PATH"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"

        # Check if all required signing environment variables are set (without showing values)
        if [ -n "$KEYSTORE_PASSWORD" ]; then
          echo "✅ KEYSTORE_PASSWORD is set"
        else
          echo "❌ KEYSTORE_PASSWORD not set"
        fi

        if [ -n "$KEY_ALIAS" ]; then
          echo "✅ KEY_ALIAS is set"
        else
          echo "❌ KEY_ALIAS not set"
        fi

        if [ -n "$KEY_PASSWORD" ]; then
          echo "✅ KEY_PASSWORD is set"
        else
          echo "❌ KEY_PASSWORD not set"
        fi
      env:
        # Android signing environment variables for debugging
        CI: true
        KEYSTORE_PATH: android/release.keystore
        KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

    - name: Build client
      run: npm run build:client
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_MAPBOX_ACCESS_TOKEN: ${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}

    - name: Generate App Icons
      working-directory: ./client
      run: |
        echo "Generating app icons for mobile platforms..."

        # Check if the icon file exists
        ICON_FILE="src-tauri/icons/be-out_icon_512x512.png"
        if [ -f "$ICON_FILE" ]; then
          echo "✅ Found icon file: $ICON_FILE"
          ls -la "$ICON_FILE"

          echo "Generating icons using Tauri CLI..."
          if npx tauri icon "$ICON_FILE"; then
            echo "✅ Icons generated successfully"

            # Show generated icons
            echo "=== Generated icons ==="
            find src-tauri/icons -name "*.png" -o -name "*.ico" | head -10
          else
            echo "❌ Failed to generate icons"
            echo "Trying with local Tauri CLI..."
            cargo tauri icon "$ICON_FILE" || echo "Local cargo tauri also failed"
          fi
        else
          echo "⚠️  Icon file not found: $ICON_FILE"
          echo "Available files in src-tauri/icons/:"
          ls -la src-tauri/icons/ || echo "Icons directory not found"

          # Try to find any PNG files that could be used as icons
          echo "Looking for alternative icon files..."
          find src-tauri -name "*.png" | head -5
        fi

    - name: Initialize Android project
      working-directory: ./client
      run: |
        echo "Initializing Tauri Android project..."
        echo "Environment variables:"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "NDK_HOME: $NDK_HOME"
        echo "JAVA_HOME: $JAVA_HOME"

        echo "Available npm scripts in client directory:"
        npm run | grep tauri || echo "No tauri scripts found"

        echo "Checking Tauri CLI availability:"
        npx tauri --version || echo "npx tauri not available"

        # Try different approaches to run tauri android init
        echo "Attempting to initialize Android project..."

        # Try npm scripts first, then npx
        if npm run tauri:android:init -- --ci; then
          echo "✅ Android project initialized with npm script"
        elif npx tauri android init --ci; then
          echo "✅ Android project initialized with npx tauri"
        else
          echo "❌ All initialization methods failed"
          echo "Checking Tauri CLI installation..."

          # Debug information
          npm list @tauri-apps/cli || echo "Local @tauri-apps/cli not found"
          ls -la node_modules/.bin/ | grep tauri || echo "No tauri in node_modules/.bin"
          echo "Checking root node_modules:"
          ls -la ../node_modules/.bin/ | grep tauri || echo "No tauri in root node_modules/.bin"
        fi

        echo "Checking for generated project..."
        find . -name "gen" -type d 2>/dev/null || echo "No gen directory found"
        find . -name "android" -type d 2>/dev/null || echo "No android directory found"

        # Check if Android project was created
        if [ -d "src-tauri/gen/android" ]; then
          echo "✅ Android project created successfully"
          ls -la src-tauri/gen/
        else
          echo "❌ Android project directory not found, trying alternative paths..."
          find src-tauri -type d -name "*android*" 2>/dev/null || echo "No Android directories found"
        fi
      env:
        ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        NDK_HOME: ${{ env.NDK_HOME }}
        JAVA_HOME: ${{ env.JAVA_HOME }}

    - name: Debug Android Project Generation (Compare with Local)
      working-directory: ./client
      run: |
        echo "=== DEBUGGING: Android Project Generation for Local vs CI Comparison ==="

        if [ -d "src-tauri/gen/android" ]; then
          echo "🔍 Analyzing generated Android project..."

          echo "=== 1. Tauri CLI Version Info ==="
          npx tauri --version || echo "npx tauri version failed"
          cargo tauri --version || echo "cargo tauri version failed"

          echo "=== 2. Android Project Structure ==="
          find src-tauri/gen/android -type f -name "*.xml" -o -name "*.gradle*" -o -name "*.kt" | head -20

          echo "=== 3. Android Manifest Contents (COMPLETE) ==="
          if [ -f "src-tauri/gen/android/app/src/main/AndroidManifest.xml" ]; then
            echo "--- COMPLETE AndroidManifest.xml ---"
            cat src-tauri/gen/android/app/src/main/AndroidManifest.xml
            echo "--- END AndroidManifest.xml ---"
          else
            echo "❌ AndroidManifest.xml not found"
            find src-tauri/gen/android -name "AndroidManifest.xml" 2>/dev/null || echo "No manifest files found"
          fi

          echo "=== 4. Android Themes (CRITICAL FOR STATUS BAR) ==="
          echo "--- themes.xml ---"
          cat src-tauri/gen/android/app/src/main/res/values/themes.xml 2>/dev/null || echo "No themes.xml found"
          echo "--- themes.xml (night) ---"
          cat src-tauri/gen/android/app/src/main/res/values-night/themes.xml 2>/dev/null || echo "No night themes.xml found"
          echo "--- colors.xml ---"
          cat src-tauri/gen/android/app/src/main/res/values/colors.xml 2>/dev/null || echo "No colors.xml found"
          echo "--- strings.xml ---"
          cat src-tauri/gen/android/app/src/main/res/values/strings.xml 2>/dev/null || echo "No strings.xml found"

          echo "=== 5. Build Configuration Files ==="
          if [ -f "src-tauri/gen/android/app/build.gradle.kts" ]; then
            echo "--- app/build.gradle.kts (first 50 lines) ---"
            head -50 src-tauri/gen/android/app/build.gradle.kts
          fi

          if [ -f "src-tauri/gen/android/build.gradle.kts" ]; then
            echo "--- root build.gradle.kts ---"
            cat src-tauri/gen/android/build.gradle.kts
          fi

          echo "=== 6. Generated App Configuration ==="
          find src-tauri/gen/android -name "*.properties" -exec echo "--- {} ---" \; -exec cat {} \; 2>/dev/null || echo "No properties files found"

          echo "=== 7. Android Resources ==="
          echo "Generated drawable resources:"
          find src-tauri/gen/android -path "*/res/drawable*" -name "*.png" -o -name "*.xml" | head -10 || echo "No drawable resources found"

          echo "Generated layout resources:"
          find src-tauri/gen/android -path "*/res/layout*" -name "*.xml" | head -5 || echo "No layout resources found"

          echo "=== 8. Tauri Configuration Used ==="
          echo "--- tauri.conf.json ---"
          cat src-tauri/tauri.conf.json | head -50

          echo "=== 9. Environment Variables During Generation ==="
          env | grep -E "(ANDROID|TAURI|JAVA|SDK)" | sort

        else
          echo "❌ No Android project found - initialization may have failed"
        fi
      env:
        ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        NDK_HOME: ${{ env.NDK_HOME }}
        JAVA_HOME: ${{ env.JAVA_HOME }}

    - name: Patch Android Build for Signing
      working-directory: ./client
      run: |
        echo "=== Patching Android app build.gradle.kts for signing ==="

        APP_BUILD_FILE="src-tauri/gen/android/app/build.gradle.kts"

        if [ -f "$APP_BUILD_FILE" ]; then
          echo "✅ Found app build file: $APP_BUILD_FILE"

          # Create a backup
          cp "$APP_BUILD_FILE" "$APP_BUILD_FILE.backup"

          # Check if signingConfigs already exists (to avoid double-patching)
          if grep -q "signingConfigs" "$APP_BUILD_FILE"; then
            echo "⚠️ signingConfigs already exists, skipping patch"
          else
            echo "🔧 Adding signing configuration to app build file..."

            # Create the signing configuration content using echo statements
            echo "" > signing_config_patch.txt
            echo "    signingConfigs {" >> signing_config_patch.txt
            echo "        if (System.getenv(\"CI\") == \"true\" && System.getenv(\"KEYSTORE_PATH\") != null) {" >> signing_config_patch.txt
            echo "            create(\"release\") {" >> signing_config_patch.txt
            echo "                storeFile = file(\"../../../../\${System.getenv(\"KEYSTORE_PATH\")}\")" >> signing_config_patch.txt
            echo "                storePassword = System.getenv(\"KEYSTORE_PASSWORD\")" >> signing_config_patch.txt
            echo "                keyAlias = System.getenv(\"KEY_ALIAS\")" >> signing_config_patch.txt
            echo "                keyPassword = System.getenv(\"KEY_PASSWORD\")" >> signing_config_patch.txt
            echo "            }" >> signing_config_patch.txt
            echo "        } else {" >> signing_config_patch.txt
            echo "            // Load keystore properties from git-ignored file for local development" >> signing_config_patch.txt
            echo "            val keystoreProperties = Properties().apply {" >> signing_config_patch.txt
            echo "                val propFile = file(\"../../../../../src-tauri/keystore.properties\")" >> signing_config_patch.txt
            echo "                if (propFile.exists()) {" >> signing_config_patch.txt
            echo "                    propFile.inputStream().use { load(it) }" >> signing_config_patch.txt
            echo "                }" >> signing_config_patch.txt
            echo "            }" >> signing_config_patch.txt
            echo "" >> signing_config_patch.txt
            echo "            if (keystoreProperties.containsKey(\"keyAlias\")) {" >> signing_config_patch.txt
            echo "                create(\"release\") {" >> signing_config_patch.txt
            echo "                    storeFile = file(\"../../../../../src-tauri/\${keystoreProperties[\"storeFile\"]}\")" >> signing_config_patch.txt
            echo "                    storePassword = keystoreProperties[\"storePassword\"] as String" >> signing_config_patch.txt
            echo "                    keyAlias = keystoreProperties[\"keyAlias\"] as String" >> signing_config_patch.txt
            echo "                    keyPassword = keystoreProperties[\"keyPassword\"] as String" >> signing_config_patch.txt
            echo "                }" >> signing_config_patch.txt
            echo "            }" >> signing_config_patch.txt
            echo "        }" >> signing_config_patch.txt
            echo "    }" >> signing_config_patch.txt

            # Insert the signing configuration after the defaultConfig block
            # Use a simpler approach with awk to avoid sed delimiter issues
            awk '
            /defaultConfig \{/ { in_config = 1 }
            in_config && /^\s*\}/ && !inserted {
                print $0
                while ((getline line < "signing_config_patch.txt") > 0) {
                    print line
                }
                close("signing_config_patch.txt")
                inserted = 1
                next
            }
            { print }
            ' "$APP_BUILD_FILE" > "$APP_BUILD_FILE.tmp" && mv "$APP_BUILD_FILE.tmp" "$APP_BUILD_FILE"

            # Add signingConfig to the release buildType using a different approach
            # First create a temporary patch file for the signing config line
            echo "            signingConfig = signingConfigs.findByName(\"release\")" > buildtype_patch.txt

            # Insert the signingConfig line before the closing brace of the release buildType
            awk '
            /getByName\("release"\) \{/ { in_release = 1 }
            in_release && /^\s*\}/ && !inserted {
                while ((getline line < "buildtype_patch.txt") > 0) {
                    print line
                }
                close("buildtype_patch.txt")
                print $0
                inserted = 1
                next
            }
            { print }
            ' "$APP_BUILD_FILE" > "$APP_BUILD_FILE.tmp" && mv "$APP_BUILD_FILE.tmp" "$APP_BUILD_FILE"

            # Clean up the temporary file
            rm buildtype_patch.txt

            # Add validation block at the end, before rust block
            echo "" >> "$APP_BUILD_FILE"
            echo "afterEvaluate {" >> "$APP_BUILD_FILE"
            echo "    if (System.getenv(\"CI\") == \"true\") {" >> "$APP_BUILD_FILE"
            echo "        val signingConfig = android.signingConfigs.findByName(\"release\")" >> "$APP_BUILD_FILE"
            echo "        // Fail the build if signingConfig is missing or any value is missing" >> "$APP_BUILD_FILE"
            echo "        if (signingConfig == null ||" >> "$APP_BUILD_FILE"
            echo "            signingConfig.storeFile == null ||" >> "$APP_BUILD_FILE"
            echo "            signingConfig.storePassword.isNullOrBlank() ||" >> "$APP_BUILD_FILE"
            echo "            signingConfig.keyAlias.isNullOrBlank() ||" >> "$APP_BUILD_FILE"
            echo "            signingConfig.keyPassword.isNullOrBlank()" >> "$APP_BUILD_FILE"
            echo "        ) {" >> "$APP_BUILD_FILE"
            echo "            throw org.gradle.api.GradleException(\"Signing config for release build is missing or incomplete. Please check your environment variables.\")" >> "$APP_BUILD_FILE"
            echo "        }" >> "$APP_BUILD_FILE"
            echo "    }" >> "$APP_BUILD_FILE"
            echo "}" >> "$APP_BUILD_FILE"

            echo "✅ Successfully patched app build file for signing"

            # Show the changes
            echo "=== Patched build file content (first 100 lines) ==="
            head -100 "$APP_BUILD_FILE"

            # Clean up
            rm signing_config_patch.txt
          fi
        else
          echo "❌ App build file not found: $APP_BUILD_FILE"
          echo "Available files in Android project:"
          find src-tauri/gen/android -name "*.gradle*" 2>/dev/null || echo "No gradle files found"
        fi

    - name: Debug Gradle Build Process Before Tauri
      working-directory: ./client
      run: |
        echo "=== Manual Gradle Build Debug ==="

        if [ -d "src-tauri/gen/android" ]; then
          cd src-tauri/gen/android

          echo "=== Gradle Project Structure ==="
          ls -la

          echo "=== Gradle Wrapper Permissions ==="
          ls -la gradlew
          chmod +x gradlew

          echo "=== Gradle Version ==="
          ./gradlew --version

          echo "=== Android Project Tasks ==="
          ./gradlew tasks --all | head -50

          echo "=== Checking Build File Contents ==="
          echo "--- app/build.gradle.kts (first 50 lines) ---"
          head -50 app/build.gradle.kts || echo "No app build file found"

          echo "=== Trying Basic Gradle Build ==="
          if ./gradlew build --info --stacktrace 2>&1 | tee manual_gradle_build.log; then
            echo "✅ Manual Gradle build succeeded"
          else
            echo "❌ Manual Gradle build failed"
            echo "=== Last 50 lines of Gradle build log ==="
            tail -50 manual_gradle_build.log

            echo "=== Looking for specific error patterns ==="
            grep -i "error\|exception\|failed\|could not" manual_gradle_build.log | tail -20

            echo "=== Checking for signing-related errors ==="
            grep -i "sign\|keystore\|alias\|password" manual_gradle_build.log | tail -10
          fi
        else
          echo "❌ Android project directory not found"
        fi
      env:
        ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        NDK_HOME: ${{ env.NDK_HOME }}
        JAVA_HOME: ${{ env.JAVA_HOME }}
        # Android signing environment variables
        CI: true
        KEYSTORE_PATH: android/release.keystore
        KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

    - name: Debug Rust Build Environment
      run: |
        echo "=== Rust Build Environment Debug ==="
        echo "Rust version:"
        rustc --version
        echo "Cargo version:"
        cargo --version
        echo "Installed targets:"
        rustup target list --installed
        echo "Cargo config:"
        cat ~/.cargo/config.toml || echo "No Cargo config found"
        echo "NDK tools verification:"
        ls -la "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/" | grep -E "(aarch64|armv7|x86_64|i686).*android.*clang" || echo "No Android clang tools found"
        echo "Environment variables:"
        env | grep -E "(ANDROID|NDK|JAVA|CARGO|RUST)" | sort
      env:
        NDK_HOME: ${{ env.NDK_HOME }}

    - name: Test Rust Cross-Compilation
      run: |
        echo "=== Testing Rust Cross-Compilation for Android ==="
        echo "Testing if we can compile a simple Rust program for Android targets..."

        # Create a simple test Rust program
        mkdir -p /tmp/rust_test
        cd /tmp/rust_test

        # Create Cargo.toml
        cat > Cargo.toml << 'CARGO_TOML_EOF'
        [package]
        name = "test_android"
        version = "0.1.0"
        edition = "2021"

        [[bin]]
        name = "test_android"
        path = "src/main.rs"
        CARGO_TOML_EOF

        # Create main.rs
        mkdir -p src
        cat > src/main.rs << 'MAIN_RS_EOF'
        fn main() {
            println!("Hello Android!");
        }
        MAIN_RS_EOF

        echo "Created test project, testing compilation for each Android target:"

        # Test aarch64-linux-android
        echo "Testing aarch64-linux-android..."
        if cargo build --target aarch64-linux-android --verbose 2>&1; then
          echo "✅ aarch64-linux-android compilation successful"
        else
          echo "❌ Failed to compile for aarch64-linux-android"
          echo "Checking linker configuration..."
          cat ~/.cargo/config.toml | grep -A 2 aarch64-linux-android || echo "No config found"
        fi

        # Test armv7-linux-androideabi
        echo "Testing armv7-linux-androideabi..."
        if cargo build --target armv7-linux-androideabi --verbose 2>&1; then
          echo "✅ armv7-linux-androideabi compilation successful"
        else
          echo "❌ Failed to compile for armv7-linux-androideabi"
          echo "Checking linker configuration..."
          cat ~/.cargo/config.toml | grep -A 2 armv7-linux-androideabi || echo "No config found"
        fi

      env:
        NDK_HOME: ${{ env.NDK_HOME }}

    - name: Debug Gradle Build Process
      working-directory: ./client
      run: |
        echo "=== Debugging Gradle Build Process ==="
        cd src-tauri/gen/android

        echo "Gradle wrapper version:"
        ./gradlew --version

        echo "Android project tasks:"
        ./gradlew tasks --all | grep -E "(rust|Build)" || echo "No rust-related tasks found"

        echo "Attempting to run rustBuildArm64Release task manually with more details:"
        if ./gradlew :app:rustBuildArm64Release --info --stacktrace 2>&1 | tee gradle_rust_debug.log; then
          echo "✅ Manual Gradle task succeeded"
        else
          echo "❌ Manual Gradle task failed"
          echo "=== Gradle Error Analysis ==="
          tail -50 gradle_rust_debug.log
          echo "=== Looking for Node.js errors ==="
          grep -i "node\|javascript\|process.*finished.*non-zero" gradle_rust_debug.log || echo "No Node.js specific errors found"
        fi

      env:
        NDK_HOME: ${{ env.NDK_HOME }}
        ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        JAVA_HOME: ${{ env.JAVA_HOME }}

    - name: Build Android APK
      working-directory: ./client
      run: |
        echo "Building Android APK..."
        echo "Checking Android project directory..."

        # Find Android project directory
        ANDROID_PROJECT_DIR=""
        if [ -d "src-tauri/gen/android" ]; then
          ANDROID_PROJECT_DIR="src-tauri/gen/android"
          echo "✅ Found Android project at: $ANDROID_PROJECT_DIR"
        else
          echo "🔍 Searching for Android project directory..."
          ANDROID_PROJECT_DIR=$(find src-tauri -type d -name "*android*" 2>/dev/null | head -1)
          if [ -n "$ANDROID_PROJECT_DIR" ]; then
            echo "✅ Found Android project at: $ANDROID_PROJECT_DIR"
          else
            echo "❌ No Android project found, re-initializing..."
            npx tauri android init --ci
            if [ -d "src-tauri/gen/android" ]; then
              ANDROID_PROJECT_DIR="src-tauri/gen/android"
              echo "✅ Re-initialization successful: $ANDROID_PROJECT_DIR"
            else
              echo "❌ Re-initialization failed"
              exit 1
            fi
          fi
        fi

        echo "Android project directory contents:"
        ls -la "$ANDROID_PROJECT_DIR"/ 2>/dev/null || echo "Cannot list directory contents"

        echo "Starting Android build..."
        echo "Environment check before build:"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "NDK_HOME: $NDK_HOME"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "CI: $CI"
        echo "KEYSTORE_PATH: $KEYSTORE_PATH"

        # Set additional environment variables that Tauri might need
        export ANDROID_NDK_ROOT="$NDK_HOME"
        export ANDROID_NDK_HOME="$NDK_HOME"

        echo "Additional environment variables set:"
        echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"

        # Try building with more verbose output and error handling
        echo "Building for Android with detailed logging..."
        set -x  # Enable command tracing

        # First, let's try a simple build to see what happens
        echo "=== Starting Tauri Android Build ==="

        # Use the npm script that's defined in package.json
        echo "=== Attempting Tauri Build with Enhanced Error Reporting ==="

        # Run with maximum verbosity and capture all output
        if npm run tauri:android:build -- --verbose 2>&1 | tee android_build.log; then
          BUILD_EXIT_CODE=0
          echo "✅ Build succeeded with npm run tauri:android:build"
        elif npm run tauri android build -- --verbose 2>&1 | tee android_build.log; then
          BUILD_EXIT_CODE=0
          echo "✅ Build succeeded with npm run tauri android build"
        elif npx tauri android build --verbose 2>&1 | tee android_build.log; then
          BUILD_EXIT_CODE=0
          echo "✅ Build succeeded with npx tauri command"
        else
          BUILD_EXIT_CODE=1
          echo "❌ All build methods failed"

          # Immediately analyze the Gradle failure
          echo "=== GRADLE BUILD FAILURE ANALYSIS ==="

          if [ -d "src-tauri/gen/android" ]; then
            cd src-tauri/gen/android

            echo "=== Running Gradle with maximum verbosity ==="
            ./gradlew assembleRelease --info --stacktrace --debug 2>&1 | tee detailed_gradle.log

            echo "=== Gradle Build File Verification ==="
            echo "--- app/build.gradle.kts content around signingConfigs ---"
            grep -A 10 -B 5 "signingConfigs\|signingConfig" app/build.gradle.kts || echo "No signing config found in build file"

            echo "=== Environment Variables in Gradle Context ==="
            ./gradlew :app:tasks --info 2>&1 | grep -i "environment\|CI\|KEYSTORE\|KEY_" || echo "No environment variable info found"

            echo "=== Last 100 lines of detailed Gradle log ==="
            tail -100 detailed_gradle.log

            cd ../../..
          fi
        fi

        echo "=== Build completed with exit code: $BUILD_EXIT_CODE ==="

        if [ $BUILD_EXIT_CODE -eq 0 ]; then
          echo "✅ Build succeeded! Looking for APK files..."
          find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found despite successful build"
        else
          echo "❌ Build failed with exit code $BUILD_EXIT_CODE"
          echo "=== BUILD FAILED - Analyzing logs ==="
          echo "Last 50 lines of build log:"
          tail -50 android_build.log
          echo "=== Checking for common error patterns ==="
          grep -i "error\|failed\|exception" android_build.log | tail -10
          echo "=== Checking Rust compilation logs ==="
          find . -name "*.log" -type f -exec echo "=== {} ===" \; -exec tail -20 {} \; 2>/dev/null || echo "No additional log files found"

          # Don't exit immediately - let's still try to find any partial artifacts
          echo "=== Checking for partial build artifacts ==="
          find . -name "*.so" -o -name "*.a" -o -name "*.apk" -o -name "*.aab" 2>/dev/null | head -10 || echo "No build artifacts found"
        fi
      env:
        ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        NDK_HOME: ${{ env.NDK_HOME }}
        JAVA_HOME: ${{ env.JAVA_HOME }}
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_MAPBOX_ACCESS_TOKEN: ${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}
        # Android signing environment variables (CI mode)
        CI: true
        KEYSTORE_PATH: android/release.keystore
        KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

    - name: Find and Upload APK
      working-directory: ./client
      run: |
        echo "=== Searching for APK files ==="
        echo "Looking for APK files in the workspace..."
        find . -name "*.apk" -type f 2>/dev/null | head -10 || echo "No APK files found"

        echo "Checking standard Android build directories:"
        find . -path "*/build/outputs/apk*" -type d 2>/dev/null || echo "No standard APK output directories found"
        find . -path "*/target/*/release*" -type d 2>/dev/null || echo "No Rust target directories found"

        echo "Checking Tauri Android project structure:"
        if [ -d "src-tauri/gen/android" ]; then
          echo "Android project directory structure:"
          find src-tauri/gen/android -type f -name "*.apk" -o -name "*.aab" 2>/dev/null || echo "No APK/AAB files in android directory"

          echo "Full directory structure of Android project:"
          find src-tauri/gen/android -type d | head -20

          echo "Build outputs directory:"
          find src-tauri/gen/android -path "*/build/outputs*" -type d -exec ls -la {} \; 2>/dev/null || echo "No build outputs found"
        fi

        echo "Checking if build actually succeeded..."
        if [ -f "android_build.log" ]; then
          echo "=== Last 20 lines of build log ==="
          tail -20 android_build.log
          echo "=== Searching for APK creation messages ==="
          grep -i "apk\|assembl\|build.*success" android_build.log || echo "No APK creation messages found"
        fi

    - name: Upload APK (if found)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: android-apk
        path: |
          client/src-tauri/gen/android/app/build/outputs/apk/**/*.apk
          client/src-tauri/gen/android/**/build/outputs/apk/**/*.apk
          client/src-tauri/target/**/release/*.apk
          client/**/*.apk
        if-no-files-found: warn

  build-ios:
    name: Build iOS IPA
    runs-on: macos-15  # Use macOS 15 which has Xcode 16+
    needs: test-client
    if: true  # Enable for testing - Tauri 2.x has iOS support
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-ios,x86_64-apple-ios,aarch64-apple-ios-sim

    - name: Verify Xcode Version
      run: |
        echo "=== Xcode Environment Check ==="
        xcodebuild -version
        xcrun --show-sdk-version --sdk iphoneos || echo "iPhone SDK not found"

        # Check Xcode version compatibility
        XCODE_VERSION=$(xcodebuild -version | head -1 | sed 's/Xcode //')
        echo "Detected Xcode version: $XCODE_VERSION"

        # Tauri 2.x typically requires Xcode 15.0+ for iOS builds
        if [[ $(echo "$XCODE_VERSION 15.0" | tr " " "\n" | sort -V | head -1) != "15.0" ]]; then
          echo "⚠️  Warning: Xcode version may be too old for Tauri 2.x iOS builds"
          echo "   Detected: $XCODE_VERSION"
          echo "   Required: 15.0 or later"
          echo "   This may cause project format compatibility issues"
        else
          echo "✅ Xcode version appears compatible"
        fi

    - name: Install Tauri CLI
      run: |
        echo "Installing Tauri CLI..."

        # Try to install the latest version first
        if npm install -g @tauri-apps/cli@latest; then
          TAURI_VERSION=$(npm list -g @tauri-apps/cli --depth=0 | grep @tauri-apps/cli)
          echo "✅ Installed: $TAURI_VERSION"
        else
          echo "❌ Failed to install latest Tauri CLI"
          exit 1
        fi

        echo "Verifying Tauri CLI installation..."
        tauri --version || echo "Failed to get Tauri version"

        echo "Installing Tauri CLI locally as well..."
        npm install @tauri-apps/cli@latest

    - name: Install dependencies
      run: npm ci

    - name: Build client
      run: npm run build:client
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_MAPBOX_ACCESS_TOKEN: ${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}

    - name: Initialize iOS project
      working-directory: ./client
      run: |
        echo "Initializing Tauri iOS project..."
        echo "Available npm scripts in client directory:"
        npm run | grep tauri || echo "No tauri scripts found"

        # Try different methods to initialize iOS project
        if npm run tauri:ios:init -- --ci; then
          echo "✅ iOS project initialized with npm script"
        elif npx tauri ios init --ci; then
          echo "✅ iOS project initialized with npx tauri"
        else
          echo "❌ All initialization methods failed"
          echo "Checking available Tauri commands..."
          npx tauri --help || echo "No help available"
        fi

        echo "Checking for generated iOS/Apple project..."
        find . -name "*ios*" -o -name "*apple*" -type d 2>/dev/null || echo "No iOS/Apple directories found"

        # Check for both ios and apple directories (Tauri uses 'apple' for iOS/macOS)
        if [ -d "src-tauri/gen/ios" ]; then
          echo "✅ iOS project created successfully at src-tauri/gen/ios"
          ls -la src-tauri/gen/ios/
        elif [ -d "src-tauri/gen/apple" ]; then
          echo "✅ Apple project created successfully at src-tauri/gen/apple"
          ls -la src-tauri/gen/apple/
        else
          echo "❌ iOS/Apple project directory not found"
          echo "Searching for alternative iOS/Apple paths..."
          find src-tauri -type d -name "*ios*" -o -name "*apple*" 2>/dev/null || echo "No iOS/Apple directories found"
        fi

    - name: Build iOS IPA
      working-directory: ./client
      run: |
        echo "Building iOS IPA..."
        echo "Checking iOS project directory..."

        # Find iOS project directory (Tauri uses 'apple' directory for iOS/macOS)
        IOS_PROJECT_DIR=""
        if [ -d "src-tauri/gen/ios" ]; then
          IOS_PROJECT_DIR="src-tauri/gen/ios"
          echo "✅ Found iOS project at: $IOS_PROJECT_DIR"
        elif [ -d "src-tauri/gen/apple" ]; then
          IOS_PROJECT_DIR="src-tauri/gen/apple"
          echo "✅ Found Apple project at: $IOS_PROJECT_DIR"
        else
          echo "🔍 Searching for iOS/Apple project directory..."
          IOS_PROJECT_DIR=$(find src-tauri -type d -name "*ios*" -o -name "*apple*" 2>/dev/null | head -1)
          if [ -n "$IOS_PROJECT_DIR" ]; then
            echo "✅ Found iOS/Apple project at: $IOS_PROJECT_DIR"
          else
            echo "❌ No iOS/Apple project found, re-initializing..."
            if npx tauri ios init --ci; then
              if [ -d "src-tauri/gen/ios" ]; then
                IOS_PROJECT_DIR="src-tauri/gen/ios"
                echo "✅ Re-initialization successful: $IOS_PROJECT_DIR"
              elif [ -d "src-tauri/gen/apple" ]; then
                IOS_PROJECT_DIR="src-tauri/gen/apple"
                echo "✅ Re-initialization successful: $IOS_PROJECT_DIR"
              else
                echo "❌ Re-initialization failed"
                exit 1
              fi
            else
              echo "❌ Re-initialization failed"
              exit 1
            fi
          fi
        fi

        echo "iOS/Apple project directory contents:"
        ls -la "$IOS_PROJECT_DIR"/ 2>/dev/null || echo "Cannot list directory contents"

        echo "Starting iOS build..."

        # Set up code signing if certificates are available
        if [ -n "${{ secrets.APPLE_DEVELOPMENT_TEAM }}" ]; then
          echo "🔐 Apple Developer Team found, setting up code signing..."
          export APPLE_DEVELOPMENT_TEAM="${{ secrets.APPLE_DEVELOPMENT_TEAM }}"
          echo "Using Apple Development Team: $APPLE_DEVELOPMENT_TEAM"
        else
          echo "⚠️  Warning: No code signing certificates found."
          echo "This is expected in CI environment. The build may fail at the signing step."
          echo "To fix this, you would need to add APPLE_DEVELOPMENT_TEAM environment variable."
        fi

        # Try different methods to build iOS
        if npm run tauri:ios:build -- --verbose 2>&1 | tee ios_build.log; then
          echo "✅ Build succeeded with npm script"
          BUILD_SUCCESS=true
        elif npx tauri ios build --verbose 2>&1 | tee ios_build.log; then
          echo "✅ Build succeeded with npx tauri ios build"
          BUILD_SUCCESS=true
        else
          echo "❌ All build methods failed"
          BUILD_SUCCESS=false
        fi

        if [ "$BUILD_SUCCESS" = true ]; then
          echo "✅ Build completed! Looking for IPA files..."
          find . -name "*.ipa" -type f 2>/dev/null || echo "No IPA files found despite successful build"
        else
          echo "=== BUILD FAILED - Analyzing logs ==="
          if [ -f "ios_build.log" ]; then
            echo "Last 50 lines of build log:"
            tail -50 ios_build.log
            echo "=== Checking for common error patterns ==="
            grep -i "error\|failed\|exception\|code.*sign" ios_build.log | tail -10
            echo "=== Checking for Xcode project format issues ==="
            grep -i "project.*format\|future.*xcode\|adjust.*project.*format" ios_build.log | tail -5
            echo "=== Checking for code signing issues ==="
            grep -i "sign\|certificate\|team\|provision" ios_build.log | tail -5

            # Check for specific Xcode project format error
            if grep -q "future Xcode project file format" ios_build.log; then
              echo ""
              echo "🔧 XCODE PROJECT FORMAT ISSUE DETECTED:"
              echo "   The generated iOS project uses a newer format than this Xcode version supports."
              echo "   Solutions:"
              echo "   1. Use a newer macOS runner (macos-15 instead of macos-latest)"
              echo "   2. Use an older Tauri CLI version that generates compatible projects"
              echo "   3. Update the GitHub Actions runner to use Xcode 16+"
            fi
          fi

          echo "=== Note about expected failures ==="
          echo "iOS builds in CI typically fail at code signing without proper certificates."
          echo "However, Xcode project format issues indicate a toolchain compatibility problem."
        fi
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_MAPBOX_ACCESS_TOKEN: ${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}

    - name: Upload IPA (if found)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-ipa
        path: |
          client/src-tauri/gen/ios/build/Build/Products/*.ipa
          client/src-tauri/gen/ios/**/build/**/*.ipa
          client/src-tauri/gen/apple/build/Build/Products/*.ipa
          client/src-tauri/gen/apple/**/build/**/*.ipa
          client/**/*.ipa
        if-no-files-found: warn

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]  # Now depends on both builds
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Download Android APK
      uses: actions/download-artifact@v4
      with:
        name: android-apk
        path: ./artifacts/
      continue-on-error: true

    - name: Download iOS IPA
      uses: actions/download-artifact@v4
      with:
        name: ios-ipa
        path: ./artifacts/
      continue-on-error: true

    - name: List artifacts
      run: |
        echo "Available artifacts:"
        find ./artifacts -type f -name "*.apk" -o -name "*.ipa" 2>/dev/null || echo "No APK or IPA files found"
        ls -la ./artifacts/ 2>/dev/null || echo "No artifacts directory"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/*.apk
          ./artifacts/*.ipa
        draft: true
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
