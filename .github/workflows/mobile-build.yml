name: Mobile App Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-client:
    name: Test Client App
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    - name: Install dependencies
      run: npm ci
    - name: Build client
      run: npm run build:client
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_MAPBOX_ACCESS_TOKEN: ${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}
    - name: Test client
      run: npm run test --workspace=client --if-present

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: test-client
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android

    - name: Install Rust targets for Android
      run: |
        echo "Installing Android targets..."
        rustup target add aarch64-linux-android
        rustup target add armv7-linux-androideabi
        rustup target add x86_64-linux-android
        rustup target add i686-linux-android
        echo "Installed targets:"
        rustup target list --installed | grep android

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        build-tools: 33.0.0
        ndk-version: 25.2.9519653

    - name: Verify Android Environment
      run: |
        echo "Android SDK Root: $ANDROID_SDK_ROOT"
        echo "NDK Home: $ANDROID_SDK_ROOT/ndk/25.2.9519653"
        echo "Java Home: $JAVA_HOME"
        ls -la $ANDROID_SDK_ROOT/ndk/ || echo "NDK directory not found"
        # Find actual NDK directory
        if [ -d "$ANDROID_SDK_ROOT/ndk" ]; then
          echo "Available NDK versions:"
          ls -la $ANDROID_SDK_ROOT/ndk/
          NDK_DIR=$(ls -1 $ANDROID_SDK_ROOT/ndk/ | head -1)
          echo "Using NDK: $NDK_DIR"
          echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/$NDK_DIR" >> $GITHUB_ENV
        fi

    - name: Configure Cargo for Android
      run: |
        echo "Setting up Cargo configuration for Android builds..."
        echo "Using NDK_HOME: $NDK_HOME"
        mkdir -p ~/.cargo

        # Verify NDK tools exist before creating config
        NDK_TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
        echo "Checking NDK toolchain at: $NDK_TOOLCHAIN"
        
        if [ ! -d "$NDK_TOOLCHAIN" ]; then
          echo "❌ NDK toolchain directory not found: $NDK_TOOLCHAIN"
          echo "Available NDK contents:"
          find "$NDK_HOME" -type d -name "bin" 2>/dev/null | head -5
          exit 1
        fi

        # Find the correct Android API level linkers
        echo "Looking for Android clang linkers..."
        AARCH64_LINKER=$(find "$NDK_TOOLCHAIN" -name "*aarch64*android*clang" | head -1)
        ARMV7_LINKER=$(find "$NDK_TOOLCHAIN" -name "*armv7*android*clang" -o -name "*arm*android*clang" | head -1)
        X86_64_LINKER=$(find "$NDK_TOOLCHAIN" -name "*x86_64*android*clang" | head -1)
        I686_LINKER=$(find "$NDK_TOOLCHAIN" -name "*i686*android*clang" | head -1)

        echo "Found linkers:"
        echo "AARCH64: $AARCH64_LINKER"
        echo "ARMV7: $ARMV7_LINKER"
        echo "X86_64: $X86_64_LINKER"
        echo "I686: $I686_LINKER"

        # Use found linkers or fallback to API level 21
        AARCH64_LINKER=${AARCH64_LINKER:-"$NDK_TOOLCHAIN/aarch64-linux-android21-clang"}
        ARMV7_LINKER=${ARMV7_LINKER:-"$NDK_TOOLCHAIN/armv7a-linux-androideabi21-clang"}
        X86_64_LINKER=${X86_64_LINKER:-"$NDK_TOOLCHAIN/x86_64-linux-android21-clang"}
        I686_LINKER=${I686_LINKER:-"$NDK_TOOLCHAIN/i686-linux-android21-clang"}

        # Create Cargo config with discovered linkers
        cat > ~/.cargo/config.toml << 'CARGO_EOF'
        [target.aarch64-linux-android]
        ar = "AR_PLACEHOLDER"
        linker = "AARCH64_LINKER_PLACEHOLDER"

        [target.armv7-linux-androideabi]
        ar = "AR_PLACEHOLDER"
        linker = "ARMV7_LINKER_PLACEHOLDER"

        [target.x86_64-linux-android]
        ar = "AR_PLACEHOLDER"
        linker = "X86_64_LINKER_PLACEHOLDER"

        [target.i686-linux-android]
        ar = "AR_PLACEHOLDER"
        linker = "I686_LINKER_PLACEHOLDER"
        CARGO_EOF

        # Replace placeholders with actual paths
        sed -i "s|AR_PLACEHOLDER|$NDK_TOOLCHAIN/llvm-ar|g" ~/.cargo/config.toml
        sed -i "s|AARCH64_LINKER_PLACEHOLDER|$AARCH64_LINKER|g" ~/.cargo/config.toml
        sed -i "s|ARMV7_LINKER_PLACEHOLDER|$ARMV7_LINKER|g" ~/.cargo/config.toml
        sed -i "s|X86_64_LINKER_PLACEHOLDER|$X86_64_LINKER|g" ~/.cargo/config.toml
        sed -i "s|I686_LINKER_PLACEHOLDER|$I686_LINKER|g" ~/.cargo/config.toml

        echo "Cargo config created:"
        cat ~/.cargo/config.toml
        
        # Verify all tools exist
        echo "Verifying all tools exist:"
        for tool in "$NDK_TOOLCHAIN/llvm-ar" "$AARCH64_LINKER" "$ARMV7_LINKER" "$X86_64_LINKER" "$I686_LINKER"; do
          if [ -f "$tool" ]; then
            echo "✅ $tool"
          else
            echo "❌ $tool (not found)"
          fi
        done
      env:
        NDK_HOME: ${{ env.NDK_HOME }}

    - name: Verify NDK Tools
      run: |
        echo "Verifying NDK tools are available..."
        echo "NDK_HOME: $NDK_HOME"
        ls -la "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/" | head -10

        # Test if the linkers exist
        if [ -f "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" ]; then
          echo "✅ ARM64 linker found"
        else
          echo "❌ ARM64 linker not found"
          echo "Available linkers:"
          find "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/" -name "*android*clang*" | head -5
        fi
      env:
        NDK_HOME: ${{ env.NDK_HOME }}

    - name: Install Tauri CLI
      run: npm install -g @tauri-apps/cli@latest

    - name: Install dependencies
      run: npm ci

    - name: Build client
      run: npm run build:client
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_MAPBOX_ACCESS_TOKEN: ${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}

    - name: Initialize Android project
      run: |
        echo "Initializing Tauri Android project..."
        echo "Environment variables:"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "NDK_HOME: $NDK_HOME"
        echo "JAVA_HOME: $JAVA_HOME"

        # Initialize Android project
        tauri android init --ci || true

        echo "Checking for generated project..."
        find . -name "gen" -type d 2>/dev/null || echo "No gen directory found"
        find . -name "android" -type d 2>/dev/null || echo "No android directory found"

        # Check if Android project was created
        if [ -d "src-tauri/gen/android" ]; then
          echo "✅ Android project created successfully"
          ls -la src-tauri/gen/
        else
          echo "❌ Android project directory not found, trying alternative paths..."
          find src-tauri -type d -name "*android*" 2>/dev/null || echo "No Android directories found"
        fi
      env:
        ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        NDK_HOME: ${{ env.NDK_HOME }}
        JAVA_HOME: ${{ env.JAVA_HOME }}

    - name: Debug Rust Build Environment
      run: |
        echo "=== Rust Build Environment Debug ==="
        echo "Rust version:"
        rustc --version
        echo "Cargo version:"
        cargo --version
        echo "Installed targets:"
        rustup target list --installed
        echo "Cargo config:"
        cat ~/.cargo/config.toml || echo "No Cargo config found"
        echo "NDK tools verification:"
        ls -la "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/" | grep -E "(aarch64|armv7|x86_64|i686).*android.*clang" || echo "No Android clang tools found"
        echo "Environment variables:"
        env | grep -E "(ANDROID|NDK|JAVA|CARGO|RUST)" | sort
      env:
        NDK_HOME: ${{ env.NDK_HOME }}

    - name: Build Android APK
      run: |
        echo "Building Android APK..."
        echo "Checking Android project directory..."

        # Find Android project directory
        ANDROID_PROJECT_DIR=""
        if [ -d "src-tauri/gen/android" ]; then
          ANDROID_PROJECT_DIR="src-tauri/gen/android"
          echo "✅ Found Android project at: $ANDROID_PROJECT_DIR"
        else
          echo "🔍 Searching for Android project directory..."
          ANDROID_PROJECT_DIR=$(find src-tauri -type d -name "*android*" 2>/dev/null | head -1)
          if [ -n "$ANDROID_PROJECT_DIR" ]; then
            echo "✅ Found Android project at: $ANDROID_PROJECT_DIR"
          else
            echo "❌ No Android project found, re-initializing..."
            tauri android init --ci
            if [ -d "src-tauri/gen/android" ]; then
              ANDROID_PROJECT_DIR="src-tauri/gen/android"
              echo "✅ Re-initialization successful: $ANDROID_PROJECT_DIR"
            else
              echo "❌ Re-initialization failed"
              exit 1
            fi
          fi
        fi

        echo "Android project directory contents:"
        ls -la "$ANDROID_PROJECT_DIR"/ 2>/dev/null || echo "Cannot list directory contents"

        echo "Starting Android build..."
        echo "Environment check before build:"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT" 
        echo "NDK_HOME: $NDK_HOME"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "PATH: $PATH"

        # Set additional environment variables that Tauri might need
        export ANDROID_NDK_ROOT="$NDK_HOME"
        export ANDROID_NDK_HOME="$NDK_HOME"
        
        echo "Additional environment variables set:"
        echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"

        # Try building with more verbose output and error handling
        echo "Building for Android with detailed logging..."
        set -x  # Enable command tracing
        tauri android build --verbose 2>&1 | tee android_build.log || {
          echo "=== BUILD FAILED - Analyzing logs ==="
          echo "Last 50 lines of build log:"
          tail -50 android_build.log
          echo "=== Checking for common error patterns ==="
          grep -i "error\|failed\|exception" android_build.log | tail -10
          echo "=== Checking Rust compilation logs ==="
          find . -name "*.log" -type f -exec echo "=== {} ===" \; -exec tail -20 {} \; 2>/dev/null || echo "No additional log files found"
          exit 1
        }
      env:
        ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        NDK_HOME: ${{ env.NDK_HOME }}
        JAVA_HOME: ${{ env.JAVA_HOME }}
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_MAPBOX_ACCESS_TOKEN: ${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: src-tauri/gen/android/app/build/outputs/apk/**/*.apk

  build-ios:
    name: Build iOS IPA
    runs-on: macos-latest
    needs: test-client
    if: false  # Disable until Tauri 2.x iOS support is stable
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-ios,x86_64-apple-ios,aarch64-apple-ios-sim

    - name: Install Tauri CLI
      run: npm install -g @tauri-apps/cli@latest

    - name: Install dependencies
      run: npm ci

    - name: Build client
      run: npm run build:client

    - name: Initialize iOS (when available)
      run: |
        # This will be enabled when Tauri 2.x iOS support is stable
        # tauri ios init
        # tauri ios build --release
        echo "iOS build will be available when Tauri 2.x iOS support is stable"
        echo "Current status: iOS support is in development"
        echo "For now, focus on Android development"

    - name: Upload IPA (when available)
      if: false
      uses: actions/upload-artifact@v4
      with:
        name: ios-ipa
        path: src-tauri/gen/ios/build/Build/Products/*.ipa

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-android]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Download Android APK
      uses: actions/download-artifact@v4
      with:
        name: android-apk
        path: ./artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/*.apk
        draft: true
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
