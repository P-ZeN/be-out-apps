name: Mobile App Web Installer

on:
  workflow_run:
    workflows: ["Mobile App Build and Release"]
    types:
      - completed
  workflow_dispatch:

jobs:
  create-web-installer:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
    - uses: actions/checkout@v4

    - name: Download iOS Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: ios-build-artifacts
        path: ./ios-artifacts
      continue-on-error: true

    - name: Download Android Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: android-apk
        path: ./android-artifacts
      continue-on-error: true

    - name: Create Mobile App Installation Page
      run: |
        mkdir -p web-installer

        # Initialize variables
        HAS_IOS=false
        HAS_ANDROID=false
        IPA_NAME=""
        APK_NAME=""

        # Check for IPA file
        IPA_FILE=$(find ./ios-artifacts -name "*.ipa" 2>/dev/null | head -1)
        if [ -n "$IPA_FILE" ]; then
          echo "✅ Found IPA file: $IPA_FILE"
          IPA_NAME=$(basename "$IPA_FILE")
          cp "$IPA_FILE" "web-installer/$IPA_NAME"
          HAS_IOS=true
        else
          echo "❌ No IPA file found in artifacts"
        fi

        # Check for APK file
        APK_FILE=$(find ./android-artifacts -name "*.apk" 2>/dev/null | head -1)
        if [ -n "$APK_FILE" ]; then
          echo "✅ Found APK file: $APK_FILE"
          APK_NAME=$(basename "$APK_FILE")
          cp "$APK_FILE" "web-installer/$APK_NAME"
          HAS_ANDROID=true
        else
          echo "❌ No APK file found in artifacts"
        fi

        # Exit if no artifacts found
        if [ "$HAS_IOS" = false ] && [ "$HAS_ANDROID" = false ]; then
          echo "❌ No mobile app artifacts found"
          exit 1
        fi

        # Get repository name for URLs
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        GITHUB_PAGES_URL="https://${{ github.repository_owner }}.github.io/${REPO_NAME}"

        # Create manifest.plist for iOS over-the-air installation (only if IPA exists)
        if [ "$HAS_IOS" = true ]; then
          echo '<?xml version="1.0" encoding="UTF-8"?>' > web-installer/manifest.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> web-installer/manifest.plist
          echo '<plist version="1.0">' >> web-installer/manifest.plist
          echo '<dict>' >> web-installer/manifest.plist
          echo '    <key>items</key>' >> web-installer/manifest.plist
          echo '    <array>' >> web-installer/manifest.plist
          echo '        <dict>' >> web-installer/manifest.plist
          echo '            <key>assets</key>' >> web-installer/manifest.plist
          echo '            <array>' >> web-installer/manifest.plist
          echo '                <dict>' >> web-installer/manifest.plist
          echo '                    <key>kind</key>' >> web-installer/manifest.plist
          echo '                    <string>software-package</string>' >> web-installer/manifest.plist
          echo '                    <key>url</key>' >> web-installer/manifest.plist
          echo "                    <string>${GITHUB_PAGES_URL}/mobile-installer/${IPA_NAME}</string>" >> web-installer/manifest.plist
          echo '                </dict>' >> web-installer/manifest.plist
          echo '            </array>' >> web-installer/manifest.plist
          echo '            <key>metadata</key>' >> web-installer/manifest.plist
          echo '            <dict>' >> web-installer/manifest.plist
          echo '                <key>bundle-identifier</key>' >> web-installer/manifest.plist
          echo '                <string>com.beout.app</string>' >> web-installer/manifest.plist
          echo '                <key>bundle-version</key>' >> web-installer/manifest.plist
          echo '                <string>1.0</string>' >> web-installer/manifest.plist
          echo '                <key>kind</key>' >> web-installer/manifest.plist
          echo '                <string>software</string>' >> web-installer/manifest.plist
          echo '                <key>title</key>' >> web-installer/manifest.plist
          echo '                <string>BeOut</string>' >> web-installer/manifest.plist
          echo '            </dict>' >> web-installer/manifest.plist
          echo '        </dict>' >> web-installer/manifest.plist
          echo '    </array>' >> web-installer/manifest.plist
          echo '</dict>' >> web-installer/manifest.plist
          echo '</plist>' >> web-installer/manifest.plist
        fi

        # Create HTML installation page with dynamic content
        BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

        # Make the script executable and run it
        chmod +x .github/scripts/create-installer-page.sh
        .github/scripts/create-installer-page.sh \
          "$HAS_IOS" \
          "$HAS_ANDROID" \
          "$GITHUB_PAGES_URL" \
          "$IPA_NAME" \
          "$APK_NAME" \
          "${{ github.run_number }}" \
          "${{ github.sha }}" \
          "${{ github.ref_name }}" \
          "$BUILD_DATE"

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./web-installer
        destination_dir: mobile-installer
