name: Mobile App Web Installer

on:
  workflow_run:
    workflows: ["Mobile App Build and Release"]
    types:
      - completed
    branches:
      - mobile-build
  workflow_dispatch:
    inputs:
      download_from_run:
        description: 'Specific workflow run ID to download artifacts from (optional)'
        required: false
        type: string

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  create-web-installer:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v4

    - name: Debug Trigger Information
      run: |
        echo "üîç Workflow triggered by: ${{ github.event_name }}"
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          echo "üìã Source workflow: ${{ github.event.workflow_run.name }}"
          echo "üìã Source conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "üìã Source run ID: ${{ github.event.workflow_run.id }}"
          echo "üìã Source head SHA: ${{ github.event.workflow_run.head_sha }}"
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "üìã Manual trigger from: ${{ github.actor }}"
          echo "üìã Target run ID: ${{ inputs.download_from_run }}"

          # If no specific run ID provided, find the latest successful mobile build
          if [ -z "${{ inputs.download_from_run }}" ]; then
            echo "üîç No specific run ID provided, searching for latest successful mobile build..."

            # Use GitHub API to find the latest successful workflow run
            LATEST_RUN=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/mobile-build.yml/runs?status=success&per_page=1" \
              | jq -r '.workflow_runs[0].id // empty')

            if [ -n "$LATEST_RUN" ]; then
              echo "‚úÖ Found latest successful mobile build: $LATEST_RUN"
              echo "FALLBACK_RUN_ID=$LATEST_RUN" >> $GITHUB_ENV
            else
              echo "‚ùå No successful mobile builds found"
            fi
          fi
        fi

    - name: Show Download Configuration
      run: |
        echo "üîç Artifact download configuration:"
        echo "   Workflow run ID: ${{ github.event.workflow_run.id }}"
        echo "   Manual input run ID: ${{ inputs.download_from_run }}"
        echo "   Fallback run ID: ${{ env.FALLBACK_RUN_ID }}"

        FINAL_RUN_ID="${{ github.event.workflow_run.id || inputs.download_from_run || env.FALLBACK_RUN_ID }}"
        echo "   üìã Will attempt to download from run ID: $FINAL_RUN_ID"

        if [ -z "$FINAL_RUN_ID" ]; then
          echo "   ‚ö†Ô∏è No run ID available - artifact download will likely fail"
        fi

    - name: Download iOS Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: ios-build-artifacts
        path: ./ios-artifacts
        run-id: ${{ github.event.workflow_run.id || inputs.download_from_run || env.FALLBACK_RUN_ID }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Download Android Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: android-apk
        path: ./android-artifacts
        run-id: ${{ github.event.workflow_run.id || inputs.download_from_run || env.FALLBACK_RUN_ID }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: List Available Artifacts (Debug)
      if: always()
      run: |
        echo "üîç Checking what artifacts were downloaded..."
        echo "üìÅ iOS artifacts directory:"
        ls -la ./ios-artifacts/ 2>/dev/null || echo "   Directory not found or empty"
        echo "üìÅ Android artifacts directory:"
        ls -la ./android-artifacts/ 2>/dev/null || echo "   Directory not found or empty"

        echo ""
        echo "üîç Searching for mobile app files in all downloaded content..."
        find . -name "*.ipa" -o -name "*.apk" -o -name "*.app" 2>/dev/null || echo "   No mobile app files found"

    - name: Create Mobile App Installation Page
      run: |
        mkdir -p web-installer

        # Initialize variables
        HAS_IOS=false
        HAS_ANDROID=false
        IPA_NAME=""
        APK_NAME=""

        # Check for IPA file
        IPA_FILE=$(find ./ios-artifacts -name "*.ipa" 2>/dev/null | head -1)
        if [ -n "$IPA_FILE" ]; then
          echo "‚úÖ Found IPA file: $IPA_FILE"
          IPA_NAME=$(basename "$IPA_FILE")
          cp "$IPA_FILE" "web-installer/$IPA_NAME"
          HAS_IOS=true
        else
          echo "‚ùå No IPA file found in artifacts"
        fi

        # Check for APK file
        APK_FILE=$(find ./android-artifacts -name "*.apk" 2>/dev/null | head -1)
        if [ -n "$APK_FILE" ]; then
          echo "‚úÖ Found APK file: $APK_FILE"
          APK_NAME=$(basename "$APK_FILE")
          cp "$APK_FILE" "web-installer/$APK_NAME"
          HAS_ANDROID=true
        else
          echo "‚ùå No APK file found in artifacts"
        fi

        # Exit if no artifacts found
        if [ "$HAS_IOS" = false ] && [ "$HAS_ANDROID" = false ]; then
          echo "‚ùå No mobile app artifacts found"
          echo "üîß Creating a placeholder page instead..."

          # Create a simple status page
          mkdir -p web-installer
          echo '<!DOCTYPE html>' > web-installer/index.html
          echo '<html><head><meta charset="UTF-8"><title>BeOut Mobile App - No Builds Available</title></head>' >> web-installer/index.html
          echo '<body style="font-family: system-ui; max-width: 600px; margin: 50px auto; padding: 20px; text-align: center;">' >> web-installer/index.html
          echo '<h1>üì± BeOut Mobile App</h1>' >> web-installer/index.html
          echo '<div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 8px;">' >> web-installer/index.html
          echo '<h2>‚ö†Ô∏è No Builds Available</h2>' >> web-installer/index.html
          echo '<p>No mobile app builds were found. Please check the GitHub Actions page for build status.</p>' >> web-installer/index.html
          echo '</div></body></html>' >> web-installer/index.html
          echo "‚úÖ Created placeholder page"
        else
          echo "‚úÖ Found mobile artifacts, proceeding with installer creation..."

        # Get repository name for URLs
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        GITHUB_PAGES_URL="https://${{ github.repository_owner }}.github.io/${REPO_NAME}"

        # Create manifest.plist for iOS over-the-air installation (only if IPA exists)
        if [ "$HAS_IOS" = true ]; then
          echo '<?xml version="1.0" encoding="UTF-8"?>' > web-installer/manifest.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> web-installer/manifest.plist
          echo '<plist version="1.0">' >> web-installer/manifest.plist
          echo '<dict>' >> web-installer/manifest.plist
          echo '    <key>items</key>' >> web-installer/manifest.plist
          echo '    <array>' >> web-installer/manifest.plist
          echo '        <dict>' >> web-installer/manifest.plist
          echo '            <key>assets</key>' >> web-installer/manifest.plist
          echo '            <array>' >> web-installer/manifest.plist
          echo '                <dict>' >> web-installer/manifest.plist
          echo '                    <key>kind</key>' >> web-installer/manifest.plist
          echo '                    <string>software-package</string>' >> web-installer/manifest.plist
          echo '                    <key>url</key>' >> web-installer/manifest.plist
          echo "                    <string>${GITHUB_PAGES_URL}/${IPA_NAME}</string>" >> web-installer/manifest.plist
          echo '                </dict>' >> web-installer/manifest.plist
          echo '            </array>' >> web-installer/manifest.plist
          echo '            <key>metadata</key>' >> web-installer/manifest.plist
          echo '            <dict>' >> web-installer/manifest.plist
          echo '                <key>bundle-identifier</key>' >> web-installer/manifest.plist
          echo '                <string>com.beout.app</string>' >> web-installer/manifest.plist
          echo '                <key>bundle-version</key>' >> web-installer/manifest.plist
          echo '                <string>1.0</string>' >> web-installer/manifest.plist
          echo '                <key>kind</key>' >> web-installer/manifest.plist
          echo '                <string>software</string>' >> web-installer/manifest.plist
          echo '                <key>title</key>' >> web-installer/manifest.plist
          echo '                <string>BeOut</string>' >> web-installer/manifest.plist
          echo '            </dict>' >> web-installer/manifest.plist
          echo '        </dict>' >> web-installer/manifest.plist
          echo '    </array>' >> web-installer/manifest.plist
          echo '</dict>' >> web-installer/manifest.plist
          echo '</plist>' >> web-installer/manifest.plist
        fi

        # Create HTML installation page with dynamic content
        BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

        # Make the script executable and run it
        chmod +x .github/scripts/create-installer-page.sh
        .github/scripts/create-installer-page.sh \
          "$HAS_IOS" \
          "$HAS_ANDROID" \
          "$GITHUB_PAGES_URL" \
          "$IPA_NAME" \
          "$APK_NAME" \
          "${{ github.run_number }}" \
          "${{ github.sha }}" \
          "${{ github.ref_name }}" \
          "$BUILD_DATE"
        fi

    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./web-installer

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
