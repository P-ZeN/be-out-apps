import React, { useState } from "react";
import { useTranslation } from "react-i18next";
import {
    Box,
    Typography,
    Grid,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    TextField,
    FormControlLabel,
    Switch,
    Card,
    CardContent,
    Divider,
    Chip,
    Button,
    IconButton,
    Alert,
    Avatar,
    Paper,
    RadioGroup,
    Radio,
    InputAdornment,
    Accordion,
    AccordionSummary,
    AccordionDetails,
} from "@mui/material";
import { DateTimePicker } from "@mui/x-date-pickers/DateTimePicker";
import {
    Add as AddIcon,
    Delete as DeleteIcon,
    CloudUpload as CloudUploadIcon,
    Image as ImageIcon,
    QrCode as QrCodeIcon,
    ExpandMore as ExpandMoreIcon,
    Settings as SettingsIcon,
} from "@mui/icons-material";

const TicketDesignStep = ({ data, onChange, templates, eventData }) => {
    const { t } = useTranslation('organizer');
    const [backgroundImageFile, setBackgroundImageFile] = useState(null);

    // Ticket size options (for future use - currently fixed to A5)
    const ticketSizes = [
        { value: 'A4', label: t('A4', { ns: 'ticketDesign' }) },
        { value: 'A5', label: t('A5', { ns: 'ticketDesign' }) }
    ];

    // QR Code content options
    const qrCodeOptions = [
        {
            value: 'booking_reference',
            label: t('organizer:tickets.qr.options.bookingReference'),
            description: t('organizer:tickets.qr.descriptions.bookingReference')
        },
        {
            value: 'verification_url',
            label: t('organizer:tickets.qr.options.verificationUrl'),
            description: t('organizer:tickets.qr.descriptions.verificationUrl')
        },
        {
            value: 'event_details',
            label: t('organizer:tickets.qr.options.eventDetails'),
            description: t('organizer:tickets.qr.descriptions.eventDetails')
        }
    ];

    // Color preset options
    const colorPresets = [
        { name: t('organizer:tickets.design.colors.blue'), value: '#1976d2' },
        { name: t('organizer:tickets.design.colors.green'), value: '#388e3c' },
        { name: t('organizer:tickets.design.colors.orange'), value: '#f57c00' },
        { name: t('organizer:tickets.design.colors.purple'), value: '#7b1fa2' },
        { name: t('organizer:tickets.design.colors.red'), value: '#d32f2f' },
        { name: t('organizer:tickets.design.colors.teal'), value: '#00796b' }
    ];

    // Initialize customizations with A5 as default
    React.useEffect(() => {
        if (!data.customizations?.ticket_size) {
            handleCustomizationChange('ticket_size', 'A5');
        }
        // Ensure multiple bookings is enabled by default
        if (data.booking_settings?.allow_multiple_bookings === undefined || data.booking_settings?.allow_multiple_bookings === null) {
            handleBookingSettingsChange('allow_multiple_bookings', true);
        }
    }, []);

    const handleChange = (field, value) => {
        onChange({
            ...data,
            [field]: value
        });
    };

    const handleCustomizationChange = (field, value) => {
        const updatedCustomizations = {
            ...data.customizations,
            [field]: value
        };
        handleChange('customizations', updatedCustomizations);
    };

    const handleBookingSettingsChange = (field, value) => {
        const updatedBookingSettings = {
            ...data.booking_settings,
            [field]: value
        };
        handleChange('booking_settings', updatedBookingSettings);
    };

    const handleBackgroundImageUpload = (event) => {
        const file = event.target.files[0];
        if (file) {
            setBackgroundImageFile(file);
            const reader = new FileReader();
            reader.onloadend = () => {
                handleCustomizationChange('background_image', reader.result);
            };
            reader.readAsDataURL(file);
        }
    };

    const removeBackgroundImage = () => {
        setBackgroundImageFile(null);
        handleCustomizationChange('background_image', '');
    };

    const addPricingTier = () => {
        const newTier = {
            id: Date.now(),
            name: '',
            price: '',
            description: '',
            quantity: '',
            early_bird_price: '',
            early_bird_deadline: null,
            is_early_bird: false
        };
        const updatedTiers = [...(data.pricing_tiers || []), newTier];
        handleChange('pricing_tiers', updatedTiers);
    };

    const removePricingTier = (tierId) => {
        const updatedTiers = (data.pricing_tiers || []).filter(tier => tier.id !== tierId);
        handleChange('pricing_tiers', updatedTiers);
    };

    const updatePricingTier = (tierId, field, value) => {
        const updatedTiers = (data.pricing_tiers || []).map(tier =>
            tier.id === tierId ? { ...tier, [field]: value } : tier
        );
        handleChange('pricing_tiers', updatedTiers);
    };

    const selectedTemplate = templates.find(t => t.id === data.template_id);

    return (
        <Box sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom>
                {t('organizer:tickets.design.title')}
            </Typography>

            <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                {t('organizer:tickets.design.description')}
            </Typography>

            <Grid container spacing={3}>
                {/* Images Section */}
                <Grid size={{ xs: 12 }}>
                    <Typography variant="h6" gutterBottom>
                        {t('organizer:tickets.design.images.title')}
                    </Typography>

                    <Grid container spacing={2}>
                        {/* Use Event Image Switch */}
                        <Grid size={{ xs: 12 }}>
                            <FormControlLabel
                                control={
                                    <Switch
                                        checked={data.customizations?.use_event_image ?? true}
                                        onChange={(e) => handleCustomizationChange('use_event_image', e.target.checked)}
                                    />
                                }
                                label={t('organizer:tickets.design.images.useEventImage')}
                            />
                        </Grid>

                        {/* Background Image Upload */}
                        <Grid size={{ xs: 12 }}>
                            <Typography variant="subtitle2" gutterBottom>
                                {t('organizer:tickets.design.backgroundImage')}
                            </Typography>
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                                <Button
                                    variant="outlined"
                                    component="label"
                                    startIcon={<CloudUploadIcon />}
                                    sx={{ minWidth: 150 }}
                                >
                                    {t('organizer:tickets.design.chooseImage')}
                                    <input
                                        type="file"
                                        hidden
                                        accept="image/*"
                                        onChange={handleBackgroundImageUpload}
                                    />
                                </Button>
                                {data.customizations?.background_image && (
                                    <Button
                                        variant="outlined"
                                        color="error"
                                        onClick={removeBackgroundImage}
                                    >
                                        {t('organizer:tickets.design.removeImage')}
                                    </Button>
                                )}
                            </Box>
                            {data.customizations?.background_image && (
                                <Box sx={{ mt: 2 }}>
                                    <Paper
                                        variant="outlined"
                                        sx={{
                                            p: 2,
                                            display: 'inline-block',
                                            borderRadius: 2
                                        }}
                                    >
                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                                            <Avatar
                                                src={data.customizations.background_image}
                                                variant="square"
                                                sx={{ width: 60, height: 60 }}
                                            >
                                                <ImageIcon />
                                            </Avatar>
                                            <Box>
                                                <Typography variant="body2" sx={{ fontWeight: 'medium' }}>
                                                    {backgroundImageFile?.name || t('organizer:tickets.design.backgroundImageSelected')}
                                                </Typography>
                                                <Typography variant="caption" color="text.secondary">
                                                    {t('organizer:tickets.design.backgroundImageNote')}
                                                </Typography>
                                            </Box>
                                        </Box>
                                    </Paper>
                                </Box>
                            )}
                        </Grid>
                    </Grid>
                </Grid>

                {/* QR Code Configuration */}
                <Grid size={{ xs: 12 }}>
                    <Accordion>
                        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                                <QrCodeIcon color="action" />
                                <Typography variant="h6">
                                    {t('organizer:tickets.qr.title')}
                                </Typography>
                            </Box>
                        </AccordionSummary>
                        <AccordionDetails>
                            <Grid container spacing={2}>
                                <Grid size={{ xs: 12 }}>
                                    <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                                        {t('organizer:tickets.qr.description')}
                                    </Typography>
                                </Grid>

                                <Grid size={{ xs: 12 }}>
                                    <FormControl fullWidth>
                                        <InputLabel>{t('organizer:tickets.qr.contentType')}</InputLabel>
                                        <Select
                                            value={data.customizations?.qr_code_type || 'booking_reference'}
                                            onChange={(e) => handleCustomizationChange('qr_code_type', e.target.value)}
                                            label={t('organizer:tickets.qr.contentType')}
                                        >
                                            {qrCodeOptions.map((option) => (
                                                <MenuItem key={option.value} value={option.value}>
                                                    <Box>
                                                        <Typography variant="body2" sx={{ fontWeight: 'medium' }}>
                                                            {option.label}
                                                        </Typography>
                                                        <Typography variant="caption" color="text.secondary">
                                                            {option.description}
                                                        </Typography>
                                                    </Box>
                                                </MenuItem>
                                            ))}
                                        </Select>
                                    </FormControl>
                                </Grid>

                                <Grid size={{ xs: 12 }}>
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={data.customizations?.show_qr_code ?? true}
                                                onChange={(e) => handleCustomizationChange('show_qr_code', e.target.checked)}
                                            />
                                        }
                                        label={t('organizer:tickets.qr.showOnTicket')}
                                    />
                                </Grid>
                            </Grid>
                        </AccordionDetails>
                    </Accordion>
                </Grid>

                {/* Design Customizations */}
                <Grid size={{ xs: 12 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                        <Typography variant="h6" sx={{ flexGrow: 1 }}>
                            {t('organizer:tickets.design.customization')}
                        </Typography>
                    </Box>

                    <Grid container spacing={2}>
                        {/* Primary Color */}
                        <Grid size={{ xs: 12, md: 6 }}>
                            <FormControl fullWidth>
                                <InputLabel>{t('organizer:tickets.design.primaryColor')}</InputLabel>
                                <Select
                                    value={data.customizations?.primary_color || '#1976d2'}
                                    onChange={(e) => handleCustomizationChange('primary_color', e.target.value)}
                                    label={t('organizer:tickets.design.primaryColor')}
                                >
                                    {colorPresets.map((color) => (
                                        <MenuItem key={color.value} value={color.value}>
                                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                                <Box
                                                    sx={{
                                                        width: 20,
                                                        height: 20,
                                                        backgroundColor: color.value,
                                                        borderRadius: 1,
                                                        border: '1px solid rgba(0,0,0,0.12)'
                                                    }}
                                                />
                                                <Typography variant="body2">
                                                    {color.name}
                                                </Typography>
                                            </Box>
                                        </MenuItem>
                                    ))}
                                </Select>
                            </FormControl>
                        </Grid>

                        {/* Custom Primary Color */}
                        <Grid size={{ xs: 12, md: 6 }}>
                            <TextField
                                fullWidth
                                label={t('organizer:tickets.design.customColor')}
                                type="color"
                                value={data.customizations?.primary_color || '#1976d2'}
                                onChange={(e) => handleCustomizationChange('primary_color', e.target.value)}
                                InputProps={{
                                    startAdornment: (
                                        <InputAdornment position="start">
                                            <Box
                                                sx={{
                                                    width: 20,
                                                    height: 20,
                                                    backgroundColor: data.customizations?.primary_color || '#1976d2',
                                                    borderRadius: 1,
                                                    border: '1px solid rgba(0,0,0,0.12)'
                                                }}
                                            />
                                        </InputAdornment>
                                    )
                                }}
                            />
                        </Grid>

                        {/* Custom Text */}
                        <Grid size={{ xs: 12 }}>
                            <TextField
                                fullWidth
                                label={t('organizer:tickets.design.customText')}
                                value={data.customizations?.custom_text || ''}
                                onChange={(e) => handleCustomizationChange('custom_text', e.target.value)}
                                multiline
                                rows={2}
                                placeholder={t('organizer:tickets.design.customTextPlaceholder')}
                                helperText={t('organizer:tickets.design.customTextHelp')}
                            />
                        </Grid>
                    </Grid>
                </Grid>

                {/* Pricing Tiers */}
                <Grid size={{ xs: 12 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                        <Typography variant="h6" sx={{ flexGrow: 1 }}>
                            {t('organizer:tickets.pricing.title')}
                        </Typography>
                        <Button
                            variant="outlined"
                            startIcon={<AddIcon />}
                            onClick={addPricingTier}
                        >
                            {t('organizer:tickets.pricing.addTier')}
                        </Button>
                    </Box>

                    {(!data.pricing_tiers || data.pricing_tiers.length === 0) && (
                        <Alert severity="info" sx={{ mb: 2 }}>
                            {t('organizer:tickets.pricing.noTiers')}
                        </Alert>
                    )}

                    <Grid container spacing={2}>
                        {(data.pricing_tiers || []).map((tier, index) => (
                            <Grid size={{ xs: 12 }} key={tier.id}>
                                <Card variant="outlined">
                                    <CardContent>
                                        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                                            <Typography variant="h6" sx={{ flexGrow: 1 }}>
                                                {t('organizer:tickets.pricing.tier')} {index + 1}
                                            </Typography>
                                            <IconButton
                                                color="error"
                                                onClick={() => removePricingTier(tier.id)}
                                                size="small"
                                            >
                                                <DeleteIcon />
                                            </IconButton>
                                        </Box>

                                        <Grid container spacing={2}>
                                            <Grid size={{ xs: 12, md: 6 }}>
                                                <TextField
                                                    fullWidth
                                                    label={t('organizer:tickets.pricing.tierName')}
                                                    value={tier.name || ''}
                                                    onChange={(e) => updatePricingTier(tier.id, 'name', e.target.value)}
                                                    required
                                                />
                                            </Grid>
                                            <Grid size={{ xs: 12, md: 6 }}>
                                                <TextField
                                                    fullWidth
                                                    label={t('organizer:tickets.pricing.price')}
                                                    type="number"
                                                    value={tier.price || ''}
                                                    onChange={(e) => updatePricingTier(tier.id, 'price', e.target.value)}
                                                    InputProps={{
                                                        startAdornment: <InputAdornment position="start">€</InputAdornment>,
                                                    }}
                                                    required
                                                />
                                            </Grid>
                                            <Grid size={{ xs: 12 }}>
                                                <TextField
                                                    fullWidth
                                                    label={t('organizer:tickets.pricing.description')}
                                                    value={tier.description || ''}
                                                    onChange={(e) => updatePricingTier(tier.id, 'description', e.target.value)}
                                                    multiline
                                                    rows={2}
                                                />
                                            </Grid>
                                            <Grid size={{ xs: 12, md: 6 }}>
                                                <TextField
                                                    fullWidth
                                                    label={t('organizer:tickets.pricing.quantity')}
                                                    type="number"
                                                    value={tier.quantity || ''}
                                                    onChange={(e) => updatePricingTier(tier.id, 'quantity', e.target.value)}
                                                    helperText={t('organizer:tickets.pricing.quantityHelp')}
                                                />
                                            </Grid>

                                            {/* Early Bird Settings */}
                                            <Grid size={{ xs: 12 }}>
                                                <Divider sx={{ my: 2 }} />
                                                <FormControlLabel
                                                    control={
                                                        <Switch
                                                            checked={tier.is_early_bird || false}
                                                            onChange={(e) => updatePricingTier(tier.id, 'is_early_bird', e.target.checked)}
                                                        />
                                                    }
                                                    label={t('organizer:tickets.pricing.earlyBird')}
                                                />
                                            </Grid>

                                            {tier.is_early_bird && (
                                                <>
                                                    <Grid size={{ xs: 12, md: 6 }}>
                                                        <TextField
                                                            fullWidth
                                                            label={t('organizer:tickets.pricing.earlyBirdPrice')}
                                                            type="number"
                                                            value={tier.early_bird_price || ''}
                                                            onChange={(e) => updatePricingTier(tier.id, 'early_bird_price', e.target.value)}
                                                            InputProps={{
                                                                startAdornment: <InputAdornment position="start">€</InputAdornment>,
                                                            }}
                                                        />
                                                    </Grid>
                                                    <Grid size={{ xs: 12, md: 6 }}>
                                                        <DateTimePicker
                                                            label={t('organizer:tickets.pricing.earlyBirdDeadline')}
                                                            value={tier.early_bird_deadline}
                                                            onChange={(value) => updatePricingTier(tier.id, 'early_bird_deadline', value)}
                                                            slotProps={{
                                                                textField: {
                                                                    fullWidth: true,
                                                                }
                                                            }}
                                                        />
                                                    </Grid>
                                                </>
                                            )}
                                        </Grid>
                                    </CardContent>
                                </Card>
                            </Grid>
                        ))}
                    </Grid>
                </Grid>

                {/* Booking Settings */}
                <Grid size={{ xs: 12 }}>
                    <Typography variant="h6" gutterBottom>
                        {t('organizer:tickets.booking.settings')}
                    </Typography>

                    <Grid container spacing={2}>
                        <Grid size={{ xs: 12 }}>
                            <FormControlLabel
                                control={
                                    <Switch
                                        checked={data.booking_settings?.allow_multiple_bookings ?? true}
                                        onChange={(e) => handleBookingSettingsChange('allow_multiple_bookings', e.target.checked)}
                                    />
                                }
                                label={t('organizer:tickets.booking.allowMultiple')}
                            />
                        </Grid>
                    </Grid>
                </Grid>
            </Grid>
        </Box>
    );
};

export default TicketDesignStep;
